@startuml

/' diagram meta data start
config=StructureConfiguration;
{
  "projectClassification": {
    "searchMode": "OpenProject", // OpenProject, AllProjects
    "includedProjects": "",
    "pathEndKeywords": "*.impl",
    "isClientPath": "",
    "isClientName": "",
    "isTestPath": "",
    "isTestName": "",
    "isMappingPath": "",
    "isMappingName": "",
    "isDataAccessPath": "",
    "isDataAccessName": "",
    "isDataStructurePath": "",
    "isDataStructureName": "",
    "isInterfaceStructuresPath": "",
    "isInterfaceStructuresName": "",
    "isEntryPointPath": "",
    "isEntryPointName": "",
    "treatFinalFieldsAsMandatory": false
  },
  "graphRestriction": {
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "removeByInheritance": "", // inheritance/annotation based filtering is done in a second step
    "removeByAnnotation": "",
    "removeByClassPackage": "", // cleanup the graph after inheritance/annotation based filtering is done
    "removeByClassName": "",
    "cutMappings": false,
    "cutEnum": true,
    "cutTests": true,
    "cutClient": true,
    "cutDataAccess": false,
    "cutInterfaceStructures": false,
    "cutDataStructures": false,
    "cutGetterAndSetter": true,
    "cutConstructors": true
  },
  "graphTraversal": {
    "forwardDepth": 6,
    "backwardDepth": 6,
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "hideMappings": false,
    "hideDataStructures": false,
    "hidePrivateMethods": true,
    "hideInterfaceCalls": true, // indirection: implementation -> interface (is hidden) -> implementation
    "onlyShowApplicationEntryPoints": false, // root node is included
    "useMethodCallsForStructureDiagram": "ForwardOnly" // ForwardOnly, BothDirections, No
  },
  "details": {
    "aggregation": "GroupByClass", // ByClass, GroupByClass, None
    "showClassGenericTypes": true,
    "showMethods": true,
    "showMethodParameterNames": true,
    "showMethodParameterTypes": true,
    "showMethodReturnType": true,
    "showPackageLevels": 2,
    "showDetailedClassStructure": true
  },
  "rootClass": "nsu.fit.synchro.Main",
  "extensionCallbackMethod": "" // qualified.class.name#methodName - signature: public static String method(String)
}
diagram meta data end '/



digraph g {
    rankdir="TB"
    splines=polyline
    

'nodes 
subgraph cluster_101393 { 
   	label=fit
	labeljust=l
	fillcolor="#ececec"
	style=filled
   
   subgraph cluster_153441459 { 
   	label=synchro
	labeljust=l
	fillcolor="#d8d8d8"
	style=filled
   
   CookExample1838257583[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)CookExample</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   exp: Integer [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   id: Integer [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   isFree: AtomicBoolean [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   order: Integer [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   warehouse: PizzaWarehouse [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ run()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Dispatcher1838257583[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Dispatcher</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   cooks: ArrayList&lt;CookExample&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   source: SourceThread [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ run()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Info1838257583[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Info</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   capacity: Integer [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   cooksExp: ArrayList&lt;Integer&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   couriersSpeed: ArrayList&lt;Integer&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   couriersTrunk: ArrayList&lt;Integer&gt; [0..*]</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

JsonParser1838257583[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)JsonParser</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   mapper: ObjectMapper [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ read(filename: String): Info</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Main1838257583[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Main</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ main(args: String[])</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Picker1838257583[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Picker</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ chooseNext(frees: ArrayList&lt;AtomicBoolean&gt;, experiences: ArrayList&lt;Integer&gt;): Integer</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

PizzaWarehouse1838257583[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)PizzaWarehouse</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   queue: ArrayBlockingQueue&lt;Integer&gt; [0..*]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ getOrder(courier: CourierExample): ArrayList&lt;Integer&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >+ putOrder(num: Integer)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

SourceThread1838257583[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)SourceThread</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >#   channel: ArrayBlockingQueue&lt;Integer&gt; [0..*]</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

SystemQueue1838257583[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)SystemQueue</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ run()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

TimedRandomQueue1838257583[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)TimedRandomQueue</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ run()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

WorkerInitializer1838257583[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)WorkerInitializer</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >#   info: Info [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   warehouse: PizzaWarehouse [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ initCooks(): ArrayList&lt;CookExample&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >+ initCouriers(): ArrayList&lt;Thread&gt;</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];
} 
} 

'edges    
CookExample1838257583 -> PizzaWarehouse1838257583[label="warehouse
[0..1]"];
Dispatcher1838257583 -> CookExample1838257583[label="cooks
[0..*]"];
Dispatcher1838257583 -> Picker1838257583[label="run() -> chooseNext()"];
Dispatcher1838257583 -> SourceThread1838257583[label="source
[0..1]"];
Main1838257583 -> Dispatcher1838257583[label="main() -> run()"];
Main1838257583 -> JsonParser1838257583[label="main() -> read()"];
SourceThread1838257583 -> SystemQueue1838257583[arrowhead=none, arrowtail=empty, dir=both];
SourceThread1838257583 -> TimedRandomQueue1838257583[arrowhead=none, arrowtail=empty, dir=both];
WorkerInitializer1838257583 -> Info1838257583[label="info
[0..1]"];
WorkerInitializer1838257583 -> PizzaWarehouse1838257583[label="warehouse
[0..1]"];
    
}
@enduml